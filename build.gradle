/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'maven-publish'
    id 'application'
//    id 'groovy'
    id 'custom'
    id 'war'
    id "io.freefair.lombok" version "6.5.0-rc1"
}

repositories {
    mavenLocal()
    mavenCentral()
//   url = 'https://repository.aspose.com/repo/'
    maven {
        url = 'https://repository.aspose.com/repo/'
//        url = 'http://repo.maven.apache.org/maven2'
    }
}


dependencies {
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'javax.activation:activation:1.1.1'
//    implementation localGroovy()
//    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.8.2')
//    testImplementation('org.junit.jupiter:junit-jupiter-params:5.8.2')

    implementation 'com.google.code.gson:gson:2.8.9'

    implementation(group: 'com.aspose', name: 'aspose-words', version: '22.7', classifier: 'jdk16')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

//compileJava.options.encoding('UTF-8')

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

/*allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
}*/

group = 'groupId'
version = '1.0-SNAPSHOT'
description = 'controlTask'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

application {
    mainClassName = 'ru.clevertec.Main'
}

//    build.dependsOn downloadCheckImage
//build.configure {dependsOn downloadCheckImage}
downloadCheckImage {}
processResources.dependsOn downloadCheckImage // Явная зависимость

jar {
    //Не допускайте дублирования, игнорируя создание последующих элементов по тому же пути.
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': 'ru.clevertec.Main'
    }
    from configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}

/*test {
    useJUnitPlatform()
}*/

tasks.named('test') {
    useJUnitPlatform()
}
